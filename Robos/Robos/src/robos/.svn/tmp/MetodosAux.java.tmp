package robos;

import br.ufrgs.f180.api.Player;
import br.ufrgs.f180.api.model.RobotInformation;
import br.ufrgs.f180.math.Point;

/**
 *
 * @author Caio Nishibe
 */
public class MetodosAux {

    //ku = 240
    //tu = 3s
    static final double dt = 0.5;
    /* Caio
    static final double kP = 4.5;
    static final double kI = 1.75;//1.75;
    static final double kD = 1.4;//1.4;
    static final double ERRO_MIN = 0.05;
<<<<<<< .mine

=======
    /**/
    /* Renato */

    static final double kP = 2.0;
    static final double kI = 0.75;//1.75;
    static final double kD = 0.4;//1.4;
    static final double ERRO_MIN = 0.05;


    /**/
>>>>>>> .r9
    public static void irLinhaReta(Player cliente, Jogador j) throws Exception {
        RobotInformation p1 = cliente.getPlayerInformation(j.getNome());
        Point posJog = p1.getPosition();
        Point p = j.getPosicaoDesejada();

        System.out.println("Posição: " + posJog.getY() + " - " + p.getY());

        if (posJog != p) {

            //controle PID

            Double rX = p.getX() - posJog.getX();
            Double rY = p.getY() - posJog.getY();
            if (Math.abs(rX) < ERRO_MIN) {
                rX = 0.0;
            }
            if (Math.abs(rY) < ERRO_MIN) {
                rY = 0.0;
            }
            double ang = (Math.atan2(rY, rX) / Math.PI * 180);
            //double modulo = posJog.distanceFrom(p);



            double iX = dt * kI * ((rX + j.getXErro()) / 2 + j.getiXAnt());
            double iY = dt * kI * ((rY + j.getYErro()) / 2 + j.getiYAnt());

            double pX = rX * kP;
            double pY = rY * kP;

            double dX = kD * (rX - j.getXErro()) / dt;
            double dY = kD * (rY - j.getYErro()) / dt;

            double vX = pX + iX + dX;
            double vY = pY + iY + dY;

            j.setvXAnterior(vX);
            j.setvYAnterior(vY);

            j.setiYAnt((rY + j.getYErro()) / 2 + j.getiYAnt());
            j.setiXAnt((rX + j.getXErro()) / 2 + j.getiXAnt());

            j.setXErro(rX);
            j.setYErro(rY);



            double angB = p1.getAngle() / Math.PI * 180;
            System.out.println(j.getNome() + ": " + ang + " - " + angB);
            rotacionarParaPonto(cliente.getBallInformation().getPosition(), cliente, j.getNome());
            cliente.setPlayerVelocity(j.getNome(), vX, vY);
            System.out.println("Vy: " + vY);



        }
    }

    public static void rotacionar(double anguloDesejado, Player cliente, String id) throws Exception {
        RobotInformation p1 = cliente.getPlayerInformation(id);
        double atual = p1.getAngle() / Math.PI * 180;
        double totalAvirarHorario = anguloDesejado - atual;
        double totalAvirarAntiHorario = totalAvirarHorario - 360;
        double totalAvirar = Math.abs(totalAvirarAntiHorario) < Math.abs(totalAvirarHorario) ? totalAvirarAntiHorario : totalAvirarHorario;

        if (Math.abs(totalAvirar) >= 0.8) {
            cliente.setPlayerRotationVelocity(id, totalAvirar * 0.03);
            atual = p1.getAngle();
        } else {
            cliente.setPlayerRotationVelocity(id, 0.0);
        }
    }

    public static void rotacionarParaPonto(Point p, Player cliente, String id) throws Exception {

        RobotInformation p1 = cliente.getPlayerInformation(id);
        Point posJog = p1.getPosition();

        Double rX = p.getX() - posJog.getX();
        Double rY = p.getY() - posJog.getY();

        double ang = (Math.atan2(rY, rX) / Math.PI * 180);
        double angB = p1.getAngle() / Math.PI * 180;
        rotacionar(ang, cliente, id);

    }

    public static void contornaBola(Player cliente, Jogador jogador) throws Exception {

        if(cliente.getPlayerInformation(jogador.getNome()).getPosition().getX()!=
                cliente.getBallInformation().getPosition().getX())
        {
            jogador.setPosicaoDesejada(new Point(cliente.getBallInformation().getPosition().getX() + 40.0, cliente.getPlayerInformation(jogador.getNome()).getPosition().getY()));
            irLinhaReta(cliente,jogador);
        }

    }
}
