//Definicao do bloco
FUNCTION_BLOCK pos_x

// Define as variáveis de entrada
VAR_INPUT
    pos_bola_x : REAL;
    pos_jogador_x : REAL;
END_VAR

// Define a variavel de saida
VAR_OUTPUT
    pos_x : REAL;
END_VAR

// Fuzzificando a variável de entrada 'pos_bola_x' (0 - 550)
FUZZIFY pos_bola_x
    TERM longe := (370,0) (470,1) (550, 1);
    TERM medio := (245,0) (295,1) (395, 1) (445, 0);
    TERM perto := (105,0) (155,1) (255,1) (305,0);
    TERM mto_perto := (0,1) (80,1) (180, 0);
END_FUZZIFY

//Fuzzificando a variável de entrada 'pos_jogador_x' (0 - 550)
FUZZIFY pos_jogador_x
    TERM longe := (370,0) (470,1) (550, 1);
    TERM medio := (245,0) (295,1) (395, 1) (445, 0);
    TERM perto := (105,0) (155,1) (255,1) (305,0);
    TERM mto_perto := (0,1) (80,1) (180, 0);
END_FUZZIFY

// Defuzzificando a variável de saída 'pos_x'
DEFUZZIFY pos_x
    TERM longe := (370,0) (470,1) (520, 1);
    TERM medio := (245,0) (295,1) (395, 1) (445, 0);
    TERM perto := (105,0) (155,1) (255,1) (305,0);
    TERM mto_perto := (30,1) (80,1) (180, 0);
    // Utiliza 'Centro de Gravidade' como método de defuzzificação
    METHOD : COG;
    // Valor default é 275 (centro) (se nenhuma regra for ativada)
    DEFAULT := 275;
END_DEFUZZIFY

RULEBLOCK No1
    // Use 'min' for 'and' (also implicit use 'max'
    // for 'or' to fulfill DeMorgan's Law)
    AND : MIN;
    // Use 'min' activation method
    ACT : MIN;
    // Use 'max' accumulation method
    ACCU : MAX;


    //bola longe
    RULE 1 : IF pos_bola_x IS longe AND pos_jogador_x IS longe
                THEN pos_x IS longe;
    RULE 2 : IF pos_bola_x IS longe AND pos_jogador_x IS medio
                THEN pos_x IS longe;
    RULE 3 : IF pos_bola_x IS longe AND pos_jogador_x IS perto
                THEN pos_x IS longe;
    RULE 4 : IF pos_bola_x IS longe AND pos_jogador_x IS mto_perto
                THEN pos_x IS longe;
    //bola medio
    RULE 5 : IF pos_bola_x IS medio AND pos_jogador_x IS longe
                THEN pos_x IS medio;
    RULE 6 : IF pos_bola_x IS medio AND pos_jogador_x IS medio
                THEN pos_x IS medio;
    RULE 7 : IF pos_bola_x IS medio AND pos_jogador_x IS perto
                THEN pos_x IS medio;
    RULE 8 : IF pos_bola_x IS medio AND pos_jogador_x IS mto_perto
                THEN pos_x IS medio;
    //bola perto
    RULE 9 : IF pos_bola_x IS perto AND pos_jogador_x IS longe
                THEN pos_x IS perto;
    RULE 10 : IF pos_bola_x IS perto AND pos_jogador_x IS medio
                THEN pos_x IS perto;
    RULE 11 : IF pos_bola_x IS perto AND pos_jogador_x IS perto
                THEN pos_x IS perto;
    RULE 12 : IF pos_bola_x IS perto AND pos_jogador_x IS mto_perto
                THEN pos_x IS perto;
    //bola mto_perto
    RULE 13 : IF pos_bola_x IS mto_perto AND pos_jogador_x IS longe
                THEN pos_x IS mto_perto;
    RULE 14 : IF pos_bola_x IS mto_perto AND pos_jogador_x IS medio
                THEN pos_x IS mto_perto;
    RULE 15 : IF pos_bola_x IS mto_perto AND pos_jogador_x IS perto
                THEN pos_x IS mto_perto;
    RULE 16 : IF pos_bola_x IS mto_perto AND pos_jogador_x IS mto_perto
                THEN pos_x IS mto_perto;
END_RULEBLOCK



END_FUNCTION_BLOCK


//Definicao do bloco
FUNCTION_BLOCK pos_y

// Define as variáveis de entrada
VAR_INPUT
    pos_bola_y : REAL;
    pos_jogador_y : REAL;
END_VAR

// Define a variavel de saida
VAR_OUTPUT
    pos_y : REAL;
END_VAR

// Fuzzificando a variável de entrada 'pos_bola_y' (0 - 400)
FUZZIFY pos_bola_y
    TERM esquerda := (0,1) (50,1) (150, 0);
    TERM centro := (100,0) (150,1) (250, 1) (300, 0);
    TERM direita := (250,0) (350,1) (400,1);
END_FUZZIFY

//Fuzzificando a variável de entrada 'pos_jogador_y' (0 - 400)
FUZZIFY pos_jogador_y
     TERM esquerda := (0,1) (50,1) (150, 0);
    TERM centro := (100,0) (150,1) (250, 1) (300, 0);
    TERM direita := (250,0) (350,1) (400,1);
END_FUZZIFY

// Defuzzificando a variável de saída 'pos_y' (30-368)
DEFUZZIFY pos_y
     TERM esquerda := (30,1) (50,1) (150, 0);
    TERM centro := (100,0) (150,1) (250, 1) (300, 0);
    TERM direita := (250,0) (350,1) (368,1);
    // Utiliza 'Centro de Gravidade' como método de defuzzificação
    METHOD : COG;
    // Valor default é 200 (centro) (se nenhuma regra for ativada)
    DEFAULT := 200;
END_DEFUZZIFY

RULEBLOCK No1
    // Use 'min' for 'and' (also implicit use 'max'
    // for 'or' to fulfill DeMorgan's Law)
    AND : MIN;
    // Use 'min' activation method
    ACT : MIN;
    // Use 'max' accumulation method
    ACCU : MAX;

    //bola esquerda
    RULE 1 : IF pos_bola_y IS esquerda AND pos_jogador_y IS esquerda
                THEN pos_y IS esquerda;
    RULE 2 : IF pos_bola_y IS esquerda AND pos_jogador_y IS centro
                THEN pos_y IS esquerda;
    RULE 3 : IF pos_bola_y IS esquerda AND pos_jogador_y IS direita
                THEN pos_y IS esquerda;

//bola centro
    RULE 4 : IF pos_bola_y IS centro AND pos_jogador_y IS esquerda
                THEN pos_y IS centro;
    RULE 5 : IF pos_bola_y IS centro AND pos_jogador_y IS centro
                THEN pos_y IS centro;
    RULE 6 : IF pos_bola_y IS centro AND pos_jogador_y IS direita
                THEN pos_y IS centro;
//bola direita
    RULE 1 : IF pos_bola_y IS direita AND pos_jogador_y IS esquerda
                THEN pos_y IS direita;
    RULE 2 : IF pos_bola_y IS direita AND pos_jogador_y IS centro
                THEN pos_y IS direita;
    RULE 3 : IF pos_bola_y IS direita AND pos_jogador_y IS direita
                THEN pos_y IS direita;
END_RULEBLOCK



END_FUNCTION_BLOCK